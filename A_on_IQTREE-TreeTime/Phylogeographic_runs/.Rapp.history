data = read.csv("Sequences_metadata.csv", sep=";")
head(data)
data = read.csv("Sequences_metadata.csv", sep=";")
data = read.csv("Sequences_metadata.csv", sep=",")
head(data)
data = read.csv("Sequences_metadata.csv", sep=",")
head(data)
files = list.files("All_original_sequences")
files
files = list.files("All_original_sequences"); buffer = c()#
for (i in 1:length(files))#
	{#
		buffer = c(buffer, scan("All_original_sequences/",paste0(files[i]), what="", sep="\n", quiet=T, blank.lines.skip=F))#
	}#
if (writingFiles) write(buffer, "All_NYC_sequences.fasta")
files = list.files("All_original_sequences"); buffer = c()#
for (i in 1:length(files))#
	{#
		buffer = c(buffer, scan(paste0("All_original_sequences/",files[i]), what="", sep="\n", quiet=T, blank.lines.skip=F))#
	}#
if (writingFiles) write(buffer, "All_NYC_sequences.fasta")
write(buffer, "All_NYC_sequences.fasta")
data = read.csv("Sequences_metadata.csv", sep=",")
library(diagram)#
library(lubridate)#
library(seraphim)#
library(treeio)
data = read.csv("Sequences_metadata.csv", sep=",")
head(data)
decimal.date(dmy(gsub("\\/","-",as.character(data[,"Clinical.Collection.Date"]))))
decimale.date(dmy(gsub("\\/","-",as.character(data[,"Clinical.Collection.Date"]))))
?lubridate
decimal_date(dmy(gsub("\\/","-",as.character(data[,"Clinical.Collection.Date"]))))
dates = decimal_date(dmy(gsub("\\/","-",as.character(data[,"Clinical.Collection.Date"]))))
print(c(max(dates),min(dates)))
dates
print(c(max(dates, rm.na=T),min(dates)))
print(c(max(dates,na.rm=T),min(dates)))
print(c(max(dates,na.rm=T),min(dates,na.rm=T)))
dates = dmy(gsub("\\/","-",as.character(data[,"Clinical.Collection.Date"])))
print(c(min(dates,na.rm=T),max(dates,na.rm=T)))
cat("Sampling window: ",c(min(dates,na.rm=T)," - ",max(dates,na.rm=T)),"\n")
cat("Sampling window: ",min(dates,na.rm=T)," - ",max(dates,na.rm=T),"\n")
cat("Sampling window: ",min(dates,na.rm=T)," - ",max(dates,na.rm=T),"\n",sep="")
data = read.csv("Sequences_metadata.csv", sep=",")#
dates = dmy(gsub("\\/","-",as.character(data[,"Clinical.Collection.Date"])))#
cat("Sampling window: ",min(dates,na.rm=T)," - ",max(dates,na.rm=T),"\n",sep="")
min(dates,na.rm=T)
tree = read.tree(paste0(analysis,".tre"))
library(diagram)#
library(lubridate)#
library(seraphim)#
library(treeio)#
#
analysis = "TreeTime_26102020"#
writingFiles = FALSE; showingPlots = FALSE
tree = read.tree(paste0(analysis,".tre"))
seqIDs = tree$tip.label; countries = rep(NA, length(seqIDs)); collectionDates = rep(NA, length(seqIDs))
seqIDs
for (i in 1:length(seqIDs))#
	{#
		if (grepl("hCoV-19",seqIDs[i]))#
			{#
				countries[i] = unlist(strsplit(seqIDs[i],"\\/"))[2]#
			}	else	{#
				countries[i] = unlist(strsplit(seqIDs[i],"\\/"))[1]#
			}#
		if (length(unlist(strsplit(seqIDs[i],"\\|"))) == 3)#
			{#
				collectionDates[i] = unlist(strsplit(seqIDs[i],"\\|"))[length(unlist(strsplit(seqIDs[i],"\\|")))]#
			}#
		if (length(unlist(strsplit(seqIDs[i],"\\|"))) == 4)#
			{#
				collectionDates[i] = unlist(strsplit(seqIDs[i],"\\|"))[length(unlist(strsplit(seqIDs[i],"\\|")))-1]#
			}#
	}
collectionDates
i=37
grepl("hCoV-19",seqIDs[i])
unlist(strsplit(seqIDs[i],"\\/"))[2]
length(unlist(strsplit(seqIDs[i],"\\|"))) == 3
length(unlist(strsplit(seqIDs[i],"\\|"))) == 4
unlist(strsplit(seqIDs[i],"\\|"))
seqIDs[i]
tab = cbind(seqIDs,countries,collectionDates); colnames(tab) = c("Strain","Country","Collection Data")
tab
seqIDs
seqIDs[37]
metadata_NY_sequences = read.csv("NY_sequences_data.csv", head=T)
metadata_NS_sequences = read.csv("NS_sequences_data.csv", head=T)
i=37
head(metadata_NY_sequences)
seqIDs[i]%in%metadata_NY_sequences[,"GISAID.Virus.Name"]
metadata_NY_sequences[,"Zip.State"]
head(metadata_NY_sequences)
collectionDates
head(metadata_NY_sequences)
date = unlist(strsplit(metadata_NY_sequences[index,"Clinical.Collection.Date"],"\\/"))
index = which(metadata_NY_sequences[,"GISAID.Virus.Name"]==seqIDs[i])#
				if (metadata_NY_sequences[index,"Zip.State"]=="NY")#
					{#
						locations[i] = "NY"#
					}	else	{#
						locations[i] = "USA"#
					}
tree = read.tree(paste0(analysis,".tre")); seqIDs = tree$tip.label#
locations = rep(NA, length(seqIDs)); collectionDates = rep(NA, length(seqIDs))#
for (i in 1:length(seqIDs))#
	{#
		if (grepl("hCoV-19",seqIDs[i]))#
			{#
				locations[i] = unlist(strsplit(seqIDs[i],"\\/"))[2]#
			}	else	{#
				locations[i] = unlist(strsplit(seqIDs[i],"\\/"))[1]#
			}#
		if (length(unlist(strsplit(seqIDs[i],"\\|"))) == 3)#
			{#
				collectionDates[i] = unlist(strsplit(seqIDs[i],"\\|"))[length(unlist(strsplit(seqIDs[i],"\\|")))]#
			}#
		if (length(unlist(strsplit(seqIDs[i],"\\|"))) == 4)#
			{#
				collectionDates[i] = unlist(strsplit(seqIDs[i],"\\|"))[length(unlist(strsplit(seqIDs[i],"\\|")))-1]#
			}#
	}
i=37
index = which(metadata_NY_sequences[,"GISAID.Virus.Name"]==seqIDs[i])
index
if (metadata_NY_sequences[index,"Zip.State"]=="NY")#
					{#
						locations[i] = "NY"#
					}	else	{#
						locations[i] = "USA"#
					}
date = unlist(strsplit(metadata_NY_sequences[index,"Clinical.Collection.Date"],"\\/"))
date
for (i in 1:length(seqIDs))#
	{#
		if (seqIDs[i]%in%metadata_NY_sequences[,"GISAID.Virus.Name"])#
			{#
				index = which(metadata_NY_sequences[,"GISAID.Virus.Name"]==seqIDs[i])#
				if (metadata_NY_sequences[index,"Zip.State"]=="NY")#
					{#
						locations[i] = "NY"#
					}	else	{#
						locations[i] = "USA"#
					}#
				date = unlist(strsplit(metadata_NY_sequences[index,"Clinical.Collection.Date"],"\\/"))#
				collectionDates[i] = paste(date[3],date[2],date[1],sep="-")#
			}#
	}
tab = cbind(seqIDs,locations,collectionDates); colnames(tab) = c("Strain","Location","Collection Data")
tab
if (writingFiles) write.csv(tab, paste0(analysis,".csv"), row.names=F, quote=F)
data = read.csv(paste0(analysis,".csv"))
write.csv(tab, paste0(analysis,".csv"), row.names=F, quote=F)
data = read.csv(paste0(analysis,".csv"))
numberOfDifferentCountries = length(unique(data[,"Location"]))
dev.new(width=7, height=7); par(oma=c(0,0,0,0), mar=c(0,0,0,0.0), lwd=0.1)#
		plot(tree, type="fan", show.tip.label=F, show.node.label=F, edge.width=0.5, cex=0.6, align.tip.label=3, col="gray30", edge.color="gray30")#
		for (i in 1:dim(tree$edge)[1])#
			{#
				if ((!tree$edge[i,2]%in%tree$edge[,1]) & (grepl("Belgium",tree$tip.label[tree$edge[i,2]])))#
					{#
						nodelabels(node=tree$edge[i,2], pch=16, cex=0.6, col="chartreuse3")#
						nodelabels(node=tree$edge[i,2], pch=1, cex=0.6, col="gray30", lwd=0.5)#
					}#
				if ((!tree$edge[i,2]%in%tree$edge[,1]) & (grepl("ULG-",tree$tip.label[tree$edge[i,2]])))#
					{#
						nodelabels(node=tree$edge[i,2], pch=16, cex=0.6, col="chartreuse3")#
						nodelabels(node=tree$edge[i,2], pch=1, cex=0.6, col="gray30", lwd=0.5)#
					}#
			}#
		add.scale.bar(x=0.0, y=-0.01, length=NULL, ask=F, lwd=0.5 , lcol ="gray30", cex=0.7)
txt = c(); tab = c()#
for (i in 1:length(tree$tip.label))#
	{#
		index = which(data[,1]==tree$tip.label[i])#
		date = as.character(data[index,"Collection.Data"])#
		if (date != "")#
			{#
				txt = c(txt, paste0(">",tree$tip.label[i]),"NNNN")#
				if (grepl("Nextstrain",analysis))#
					{#
						location = unlist(strsplit(tree$tip.label[i],"\\/"))[1]#
					}#
				if (grepl("TreeTime",analysis))#
					{#
						if (grepl("hCoV-19",tree$tip.label[i]))#
							{#
								location = unlist(strsplit(tree$tip.label[i],"\\/"))[2]#
							}	else	{#
								location = unlist(strsplit(tree$tip.label[i],"\\/"))[1]#
							}#
					}#
				if (location != "Belgium") location = "other"#
				tab = rbind(tab, cbind(tree$tip.label[i],location,date))#
			}#
	}#
colnames(tab) = c("trait","location","collection_date")
write.table(tab, paste0(analysis,".txt"), row.names=F, quote=F, sep="\t")
write(txt, paste0(analysis,".fasta"))
txt = c(); tab = c()#
for (i in 1:length(tree$tip.label))#
	{#
		index = which(data[,1]==tree$tip.label[i])#
		date = as.character(data[index,"Collection.Data"])#
		if (date != "")#
			{#
				txt = c(txt, paste0(">",tree$tip.label[i]),"NNNN")#
				if (grepl("hCoV-19",tree$tip.label[i]))#
					{#
						location = unlist(strsplit(tree$tip.label[i],"\\/"))[2]#
					}	else	{#
						location = unlist(strsplit(tree$tip.label[i],"\\/"))[1]#
					}#
				if (location != "NY") location = "other"#
				tab = rbind(tab, cbind(tree$tip.label[i],location,date))#
			}#
	}#
colnames(tab) = c("trait","location","collection_date")
write.table(tab, paste0(analysis,".txt"), row.names=F, quote=F, sep="\t")
data = read.csv(paste0(analysis,".csv"))
data
data = read.csv(paste0(analysis,".csv")); tab = data[,1:2]; colnames(tab) = c("trait","location")
write.table(tab, paste0(analysis,".txt"), row.names=F, quote=F, sep="\t")
data = read.csv(paste0(analysis,".csv")); tab = data[,1:2]; colnames(tab) = c("trait","location"); txt = c()#
for (i in 1:dim(tab)[1])#
	{#
		if (tab[i,"location"] != "NY") tab[i,"location"] = "other"#
		txt = c(txt, paste0(">",tab[i,"trait"]),"NNNN")#
	}
write.table(tab, paste0(analysis,".txt"), row.names=F, quote=F, sep="\t")
write(txt, paste0(analysis,".fasta"))
library(diagram)#
library(lubridate)#
library(seraphim)#
library(treeio)#
#
analysis = "TreeTime_26102020"#
metadata_NY_sequences = read.csv("NY_sequences_data.csv", head=T)#
metadata_NS_sequences = read.csv("NS_sequences_data.csv", head=T)#
writingFiles = FALSE; showingPlots = FALSE
tree = readAnnotatedNexus(paste0(gsub("2020","20",analysis),".tree")))
paste0(gsub("2020","20",analysis),".tree"))
paste0(gsub("2020","20",analysis),".tree")
tree = readAnnotatedNexus(paste0(gsub("2020","20",analysis),".tree"))
samplingDates = decimal_date(ymd(gsub("\\/","-",tab[,"collection_date"]))); mostRecentSamplingYear = max(samplingDates)#
		selectedDates = decimal_date(ymd(c("2019-11-01","2019-12-01","2020-01-01","2020-02-01","2020-03-01","2020-04-01","2020-05-01","2020-06-01")))#
		rootHeight = max(nodeHeights(tree)); root_time = mostRecentSamplingYear-rootHeight#
		selectedLabels = c("01-11-2019","01-12-2019","01-01-2020","01-02-2020","01-03-2020","01-04-2020","01-05-2020","01-06-2020")#
		cols = rep("gray30",dim(tree$edge)[1]); lwds = rep(0.1,dim(tree$edge)[1])#
		for (i in 1:dim(tree$edge)[1])#
			{#
				if (tree$edge[i,1]%in%tree$edge[,2])#
					{#
						index = which(tree$edge[,2]==tree$edge[i,1])#
						if ((tree$annotations[[index]]$location=="NY") & (tree$annotations[[i]]$location=="NY"))#
							{#
								cols[i] = "chartreuse3"; lwds[i] = 0.4#
							}#
					}#
			}#
		pdf("Figure_1_NEW.pdf", width=7, height=7); par(oma=c(0,0,0,0), mar=c(0,0,0,0.0), lwd=0.1)#
		# dev.new(width=7, height=7); par(oma=c(0,0,0,0), mar=c(0,0,0,0.0), lwd=0.1)#
		plot(tree, type="fan", show.tip.label=F, show.node.label=F, edge.width=lwds, cex=0.6, align.tip.label=3, col="gray30", edge.color=cols)#
		for (i in 1:dim(tree$edge)[1])#
			{#
				if ((!tree$edge[i,2]%in%tree$edge[,1]) & (grepl("NY",tree$tip.label[tree$edge[i,2]])))#
					{#
						nodelabels(node=tree$edge[i,2], pch=16, cex=0.3, col="chartreuse3")#
						nodelabels(node=tree$edge[i,2], pch=1, cex=0.3, col="gray30", lwd=0.5)#
					}#
				if (tree$annotations[[i]]$location == "NY")#
					{#
						index = which(tree$edge[,2]==tree$edge[i,1])#
						if (tree$annotations[[index]]$location != "NY")#
							{#
								nodelabels(node=tree$edge[i,2], pch=16, cex=0.6, col="chartreuse3")#
								nodelabels(node=tree$edge[i,2], pch=1, cex=0.6, col="gray30", lwd=0.5)#
							}#
					}#
			}#
		add.scale.bar(x=0.0, y=-0.01, length=NULL, ask=F, lwd=0.5 , lcol ="gray30", cex=0.7)#
		cols = rep("gray50",dim(tree$edge)[1]); lwds = rep(0.05,dim(tree$edge)[1])#
		for (i in 1:dim(tree$edge)[1])#
			{#
				if (tree$edge[i,1]%in%tree$edge[,2])#
					{#
						index = which(tree$edge[,2]==tree$edge[i,1])#
						if ((tree$annotations[[index]]$location=="NY") & (tree$annotations[[i]]$location=="NY"))#
							{#
								cols[i] = "chartreuse3"; lwds[i] = 0.4#
							}#
					}#
			}#
		dev.off()#
		pdf("Figure_S1_NEW.pdf", width=11, height=8) # dev.new(width=11, height=8)#
		plot(tree, show.tip.label=F, show.node.label=F, edge.width=lwds, cex=0.6, align.tip.label=3, col="gray30", edge.color=cols)#
		for (i in 1:dim(tree$edge)[1])#
			{#
				if (tree$annotations[[i]]$location == "NY")#
					{#
						index = which(tree$edge[,2]==tree$edge[i,1])#
						if (tree$annotations[[index]]$location != "NY")#
							{#
								nodelabels(node=tree$edge[i,2], pch=16, cex=0.6, col="chartreuse3")#
								nodelabels(node=tree$edge[i,2], pch=1, cex=0.6, col="gray30", lwd=0.5)#
							}	else	{#
								if (!tree$edge[i,2]%in%tree$edge[,1])#
									{	}#
							}#
					}#
			}#
		axis(lwd=0.2, at=selectedDates-root_time, labels=selectedLabels, cex.axis=0.65, mgp=c(0,0.1,-0.9), lwd.tick=0.2, #
			 col.lab="gray30", col="gray30", tck=-0.01, side=1)#
		dev.off()
samplingDates = decimal_date(ymd(gsub("\\/","-",tab[,"collection_date"]))); mostRecentSamplingYear = max(samplingDates)
tab = read.csv(paste0(analysis,".csv"), head=T)
samplingDates = decimal_date(ymd(gsub("\\/","-",tab[,"collection_date"]))); mostRecentSamplingYear = max(samplingDates)
samplingDates = decimal_date(ymd(gsub("\\/","-",tab[,"Collection date"]))); mostRecentSamplingYear = max(samplingDates)
colnames(tab)
samplingDates = decimal_date(ymd(gsub("\\/","-",tab[,"Collection.Data"]))); mostRecentSamplingYear = max(samplingDates)
mostRecentSamplingYear
samplingDates
tab[2486,"Collection.Data"]
samplingDates = decimal_date(ymd(gsub("\\/","-",tab[,"Collection.Data"]))); mostRecentSamplingYear = max(samplingDates, na.rm=T)
mostRecentSamplingYear
tab = read.csv(paste0(analysis,".csv"), head=T)#
		samplingDates = decimal_date(ymd(gsub("\\/","-",tab[,"Collection.Data"]))); mostRecentSamplingYear = max(samplingDates, na.rm=T)#
		selectedDates = decimal_date(ymd(c("2019-11-01","2019-12-01","2020-01-01","2020-02-01","2020-03-01","2020-04-01","2020-05-01","2020-06-01")))#
		rootHeight = max(nodeHeights(tree)); root_time = mostRecentSamplingYear-rootHeight#
		selectedLabels = c("01-11-2019","01-12-2019","01-01-2020","01-02-2020","01-03-2020","01-04-2020","01-05-2020","01-06-2020")#
		cols = rep("gray30",dim(tree$edge)[1]); lwds = rep(0.1,dim(tree$edge)[1])
pdf("Figure_S1_NEW.pdf", width=11, height=8) # dev.new(width=11, height=8)#
		plot(tree, show.tip.label=F, show.node.label=F, edge.width=lwds, cex=0.6, align.tip.label=3, col="gray30", edge.color=cols)#
		for (i in 1:dim(tree$edge)[1])#
			{#
				if (tree$annotations[[i]]$location == "NY")#
					{#
						index = which(tree$edge[,2]==tree$edge[i,1])#
						if (tree$annotations[[index]]$location != "NY")#
							{#
								nodelabels(node=tree$edge[i,2], pch=16, cex=0.6, col="chartreuse3")#
								nodelabels(node=tree$edge[i,2], pch=1, cex=0.6, col="gray30", lwd=0.5)#
							}	else	{#
								if (!tree$edge[i,2]%in%tree$edge[,1])#
									{	}#
							}#
					}#
			}#
		axis(lwd=0.2, at=selectedDates-root_time, labels=selectedLabels, cex.axis=0.65, mgp=c(0,0.1,-0.9), lwd.tick=0.2, #
			 col.lab="gray30", col="gray30", tck=-0.01, side=1)#
		dev.off()
tab = read.csv(paste0(analysis,".csv"), head=T)#
		samplingDates = decimal_date(ymd(gsub("\\/","-",tab[,"Collection.Data"]))); mostRecentSamplingYear = max(samplingDates, na.rm=T)#
		selectedDates = decimal_date(ymd(c("2020-01-01","2020-02-01","2020-03-01","2020-04-01","2020-05-01")))#
		rootHeight = max(nodeHeights(tree)); root_time = mostRecentSamplingYear-rootHeight#
		selectedLabels = c("01-01-2020","01-02-2020","01-03-2020","01-04-2020","01-05-2020")#
		cols = rep("gray30",dim(tree$edge)[1]); lwds = rep(0.1,dim(tree$edge)[1])
pdf("Figure_S1_NEW.pdf", width=11, height=8) # dev.new(width=11, height=8)#
		plot(tree, show.tip.label=F, show.node.label=F, edge.width=lwds, cex=0.6, align.tip.label=3, col="gray30", edge.color=cols)#
		for (i in 1:dim(tree$edge)[1])#
			{#
				if (tree$annotations[[i]]$location == "NY")#
					{#
						index = which(tree$edge[,2]==tree$edge[i,1])#
						if (tree$annotations[[index]]$location != "NY")#
							{#
								nodelabels(node=tree$edge[i,2], pch=16, cex=0.6, col="chartreuse3")#
								nodelabels(node=tree$edge[i,2], pch=1, cex=0.6, col="gray30", lwd=0.5)#
							}	else	{#
								if (!tree$edge[i,2]%in%tree$edge[,1])#
									{	}#
							}#
					}#
			}#
		axis(lwd=0.2, at=selectedDates-root_time, labels=selectedLabels, cex.axis=0.65, mgp=c(0,0.1,-0.9), lwd.tick=0.2, #
			 col.lab="gray30", col="gray30", tck=-0.01, side=1)#
		dev.off()
USA = spTransform(raster::getData("GADM", country="USA", level=0), crs(communes))
USA
NYstateBranches = c(); NYstateIntroductions = c()#
NYstateTipBranches = c(); sampledSequences = c()#
for (i in 1:dim(tree$edge)[1])#
	{#
		if (tree$annotations[[i]]$location == "NY")#
			{#
				NYstateBranches = c(NYstateBranches,i)#
				index = which(tree$edge[,2]==tree$edge[i,1])#
				if (tree$annotations[[index]]$location != "NY")#
					{#
						NYstateIntroductions = c(NYstateIntroductions, i)#
					}#
				if (!tree$edge[i,2]%in%tree$edge[,1])#
					{#
						NYstateTipBranches = c(NYstateTipBranches, i)#
						sampledSequences = c(sampledSequences, tree$tip.label[tree$edge[i,2]])#
					}#
			}#
	}
for (i in 1:length(NYstateIntroductions))#
	{#
		if (i == 1) clusters1 = list()#
		if (tree$edge[NYstateIntroductions[i],2]%in%tree$edge[,1])#
			{#
				subtree = tree_subset(tree, tree$edge[NYstateIntroductions[i],2], levels_back=0)#
				clusters1[[i]] = gsub("'","",subtree$tip.label)#
			}	else		{#
				clusters1[[i]] = gsub("'","",tree$tip.label[tree$edge[NYstateIntroductions[i],2]])#
			}#
	}#
for (i in 2:length(clusters1))#
	{#
		for (j in 1:(i-1))#
			{#
				if (sum(clusters1[[i]]%in%clusters1[[j]]) == length(clusters1[[i]]))#
					{#
						clusters1[[j]] = clusters1[[j]][which(!clusters1[[j]]%in%clusters1[[i]])]#
					}#
				if (sum(clusters1[[j]]%in%clusters1[[i]]) == length(clusters1[[j]]))#
					{#
						clusters1[[i]] = clusters1[[i]][which(!clusters1[[i]]%in%clusters1[[j]])]#
					}#
			}#
	}#
sampledSequences = gsub("'","",sampledSequences)
clusters1
sampledSequences = gsub("'","",sampledSequences)
samplingData = matrix(nrow=length(sampledSequences), ncol=5)#
		colnames(samplingData) = c("sequenceID","collectionDate","postCode","longitude","latitude")#
		samplingData[,"sequenceID"] = sampledSequences
i=1
index = which(data[,"Strain"]==samplingData[i,"sequenceID"])
sampledSequences
data = read.csv("NY_sequences_data.csv", head=T)
head(data)
data = read.csv("NY_sequences_data.csv", head=T)#
		samplingData = matrix(nrow=length(sampledSequences), ncol=5)#
		colnames(samplingData) = c("sequenceID","collectionDate","postCode","longitude","latitude")#
		samplingData[,"sequenceID"] = sampledSequences
i=1
index = which(data[,"GISAID.Virus.Name"]==samplingData[i,"sequenceID"])
date = ymd(gsub("\\/","-",data[index,"Collection.Data"]))
samplingData[i,"collectionDate"] = decimal_date(date)
index = which(data[,"GISAID.Virus.Name"]==samplingData[i,"sequenceID"])
date = dmy(gsub("\\/","-",data[index,"Clinical.Collection.Date"]))
samplingData[i,"collectionDate"] = decimal_date(date)
ID = unlist(strsplit(samplingData[i,"sequenceID"],"\\/"))[3]
index1 = which(grepl(gsub("Rega","rega",ID),data1[,"sequence.name"]))
ID
samplingData[i,"collectionDate"]
samplingData[i,"sequenceID"]
unlist(strsplit(samplingData[i,"sequenceID"],"\\/"))[3]
samplingData
ID
data = read.csv("NY_sequences_data.csv", head=T)#
		samplingData = matrix(nrow=length(sampledSequences), ncol=5)#
		colnames(samplingData) = c("sequenceID","collectionDate","zipCode","longitude","latitude")#
		samplingData[,"sequenceID"] = sampledSequences
head(data)
samplingData[i,"zipCode"] = data[index,"Zip"]
zipCodes = shapefile("ZipCodes_shapefile_NY/ZipCodes_shapefile_NY.shp")
indices = which(zipCodes@data[,"ZIPCODE"]==data[index,"Zip"])
indices
maxArea = 0; polIndex1 = 0; polIndex2 = 0#
						for (j in 1:length(indices))#
							{#
								for (k in 1:length(communes@polygons[[indices[j]]]@Polygons))#
									{#
										if (maxArea < communes@polygons[[indices[j]]]@Polygons[[k]]@area)#
											{#
												maxArea = communes@polygons[[indices[j]]]@Polygons[[k]]@area; polIndex1 = indices[j]; polIndex2 = k#
											}#
									}#
							}#
						pol = communes@polygons[[polIndex1]]@Polygons[[polIndex2]]#
						p = Polygon(pol@coords); ps = Polygons(list(p),1); sps = SpatialPolygons(list(ps))#
						pol = sps; proj4string(pol) = communes@proj4string#
						samplingData[i,c("longitude","latitude")] = coordinates(pol) # to avoid a jitter:#
						samplingData[i,c("longitude","latitude")] = spsample(pol, 1, type="random")@coords
maxArea = 0; polIndex1 = 0; polIndex2 = 0#
						for (j in 1:length(indices))#
							{#
								for (k in 1:length(zipCodes@polygons[[indices[j]]]@Polygons))#
									{#
										if (maxArea < zipCodes@polygons[[indices[j]]]@Polygons[[k]]@area)#
											{#
												maxArea = zipCodes@polygons[[indices[j]]]@Polygons[[k]]@area; polIndex1 = indices[j]; polIndex2 = k#
											}#
									}#
							}#
						pol = zipCodes@polygons[[polIndex1]]@Polygons[[polIndex2]]#
						p = Polygon(pol@coords); ps = Polygons(list(p),1); sps = SpatialPolygons(list(ps))#
						pol = sps; proj4string(pol) = zipCodes@proj4string#
						samplingData[i,c("longitude","latitude")] = coordinates(pol) # to avoid a jitter:#
						samplingData[i,c("longitude","latitude")] = spsample(pol, 1, type="random")@coords
spsample(pol, 1, type="random")@coords
zipCodes
data = read.csv("NY_sequences_data.csv", head=T)#
		samplingData = matrix(nrow=length(sampledSequences), ncol=5)#
		colnames(samplingData) = c("sequenceID","collectionDate","zipCode","longitude","latitude")#
		samplingData[,"sequenceID"] = sampledSequences#
		for (i in 1:dim(samplingData)[1])#
			{#
				index = which(data[,"GISAID.Virus.Name"]==samplingData[i,"sequenceID"])#
				date = dmy(gsub("\\/","-",data[index,"Clinical.Collection.Date"]))#
				samplingData[i,"collectionDate"] = decimal_date(date)#
				ID = unlist(strsplit(samplingData[i,"sequenceID"],"\\/"))[3]#
				samplingData[i,"zipCode"] = data[index,"Zip"]#
				indices = which(zipCodes@data[,"ZIPCODE"]==data[index,"Zip"])#
				if (length(indices) > 0)#
					{#
						maxArea = 0; polIndex1 = 0; polIndex2 = 0#
						for (j in 1:length(indices))#
							{#
								for (k in 1:length(zipCodes@polygons[[indices[j]]]@Polygons))#
									{#
										if (maxArea < zipCodes@polygons[[indices[j]]]@Polygons[[k]]@area)#
											{#
												maxArea = zipCodes@polygons[[indices[j]]]@Polygons[[k]]@area; polIndex1 = indices[j]; polIndex2 = k#
											}#
									}#
							}#
						pol = zipCodes@polygons[[polIndex1]]@Polygons[[polIndex2]]#
						p = Polygon(pol@coords); ps = Polygons(list(p),1); sps = SpatialPolygons(list(ps))#
						pol = sps; proj4string(pol) = zipCodes@proj4string#
						samplingData[i,c("longitude","latitude")] = coordinates(pol) # to avoid a jitter:#
						samplingData[i,c("longitude","latitude")] = spsample(pol, 1, type="random")@coords#
					}#
			}#
		print(samplingData[which(is.na(samplingData[,"postCode"])),"sequenceID"])#
		write.csv(samplingData, "Sampling_NY_state.csv", quote=F, row.names=F)
print(samplingData[which(is.na(samplingData[,"zipCode"])),"sequenceID"])
zipCodes = shapefile("ZipCodes_shapefile_US/ZipCodes_shapefile_US.shp")
head(zipCodes@data)
data = read.csv("NY_sequences_data.csv", head=T)#
		samplingData = matrix(nrow=length(sampledSequences), ncol=5)#
		colnames(samplingData) = c("sequenceID","collectionDate","zipCode","longitude","latitude")#
		samplingData[,"sequenceID"] = sampledSequences#
		for (i in 1:dim(samplingData)[1])#
			{#
				index = which(data[,"GISAID.Virus.Name"]==samplingData[i,"sequenceID"])#
				date = dmy(gsub("\\/","-",data[index,"Clinical.Collection.Date"]))#
				samplingData[i,"collectionDate"] = decimal_date(date)#
				ID = unlist(strsplit(samplingData[i,"sequenceID"],"\\/"))[3]#
				samplingData[i,"zipCode"] = data[index,"Zip"]#
				indices = which(zipCodes@data[,"ZCTA5CE10"]==data[index,"Zip"])#
				if (length(indices) > 0)#
					{#
						maxArea = 0; polIndex1 = 0; polIndex2 = 0#
						for (j in 1:length(indices))#
							{#
								for (k in 1:length(zipCodes@polygons[[indices[j]]]@Polygons))#
									{#
										if (maxArea < zipCodes@polygons[[indices[j]]]@Polygons[[k]]@area)#
											{#
												maxArea = zipCodes@polygons[[indices[j]]]@Polygons[[k]]@area; polIndex1 = indices[j]; polIndex2 = k#
											}#
									}#
							}#
						pol = zipCodes@polygons[[polIndex1]]@Polygons[[polIndex2]]#
						p = Polygon(pol@coords); ps = Polygons(list(p),1); sps = SpatialPolygons(list(ps))#
						pol = sps; proj4string(pol) = zipCodes@proj4string#
						samplingData[i,c("longitude","latitude")] = coordinates(pol) # to avoid a jitter:#
						samplingData[i,c("longitude","latitude")] = spsample(pol, 1, type="random")@coords#
					}#
			}#
		# print(samplingData[which(is.na(samplingData[,"zipCode"])),"sequenceID"])#
		write.csv(samplingData, "Sampling_NY_state.csv", quote=F, row.names=F)
samplingData = read.csv("Sampling_NY_state.csv", head=T)
for (i in 1:length(NYstateIntroductions))#
	{#
		tab = c()#
		if (i == 1)#
			{#
				clusters2 = list(); centroids = list()#
			}#
		for (j in 1:length(clusters1[[i]]))#
			{#
				index = which(samplingData[,"sequenceID"]==clusters1[[i]][j])#
				if (length(index) == 1)#
					{#
						line = cbind(as.numeric(samplingData[index,"collectionDate"]),as.numeric(samplingData[index,"longitude"]),as.numeric(samplingData[index,"latitude"]))#
						row.names(line) = clusters1[[i]][j]; tab = rbind(tab, line)#
					}#
			}#
		colnames(tab) = c("collectionDate","longitude","latitude"); clusters2[[i]] = tab#
		centroids[[i]] = cbind(mean(tab[!is.na(tab[,"longitude"]),"longitude"]), mean(tab[!is.na(tab[,"latitude"]),"latitude"]))#
	}#
clusterSizes = rep(NA, length(clusters1))#
collectionDates = c()#
for (i in 1:length(clusters1))#
	{#
		clusterSizes[i] = length(clusters1[[i]])#
		collectionDates = c(collectionDates, clusters2[[i]][,"collectionDate"])#
	}
collectionDates_filetered = collectionDates#
		dev.new(width=3.3, height=8); par(mfrow=c(2,1), oma=c(0,0,0,0), mar=c(2,2,1,1), lwd=0.2, col="gray30")#
		hist(clusterSizes, breaks=50, axes=F, ann=F, title=NULL, col="#66CD0099", border="gray30")#
		axis(side=2, lwd.tick=0.2, cex.axis=0.65, mgp=c(0,0.20,0), lwd=0.2, tck=-0.015, col.tick="gray30", col.axis="gray30", col="gray30")#
		axis(side=1, lwd.tick=0.2, cex.axis=0.65, mgp=c(0,0.00,0), lwd=0.2, tck=-0.015, col.tick="gray30", col.axis="gray30", col="gray30")#
		hist(collectionDates_filetered, breaks=65, axes=F, ann=F, title=NULL, col="#66CD0099", border="gray30")#
		axis(side=2, lwd.tick=0.2, cex.axis=0.65, mgp=c(0,0.20,0), lwd=0.2, tck=-0.015, col.tick="gray30", col.axis="gray30", col="gray30")#
		axis(side=1, lwd.tick=0.2, cex.axis=0.65, mgp=c(0,0.00,0), lwd=0.2, tck=-0.015, col.tick="gray30", col.axis="gray30", col="gray30",#
			 at=decimal_date(ymd(c("2020-02-01","2020-03-01","2020-04-01","2020-05-01"))),#
			 labels=c("01-02-2020","01-03-2020","01-04-2020","01-05-2020"))
template = scan("RRW_template_2.xml", what="", sep="\n", quiet=T, blank.lines.skip=F); xml = c()
template = scan("RRW_template_file2.xml", what="", sep="\n", quiet=T, blank.lines.skip=F); xml = c()
template = scan("RRW_template_file2.xml", what="", sep="\n", quiet=T, blank.lines.skip=F); xml = c()#
sink(file=paste0("Phylogeographic_runs/All_clades_NEW.xml"))#
for (i in 1:length(template))#
	{#
		cat(template[i],"\n")#
		if (grepl("Insert taxa blocks",template[i]))#
			{#
				for (j in 1:length(clusters2))#
					{#
						if ((dim(clusters2[[j]])[1] >= 3)&(sum(!is.na(clusters2[[j]][,"longitude"])) >= 3))#
							{#
								cat(paste0("\t<taxa id=\"taxa_",j,"\">","\n"))#
								for (k in 1:dim(clusters2[[j]])[1])#
									{#
										if (!is.na(clusters2[[j]][k,"longitude"]))#
											{#
												cat(paste0("\t\t<taxon id=\"",row.names(clusters2[[j]])[k],"\">","\n"))#
												cat(paste0("\t\t\t<date value=\"",clusters2[[j]][k,"collectionDate"],"\" direction=\"forwards\" units=\"years\"/>","\n"))#
												cat("\t\t\t<attr name=\"latitude\">\n")#
												cat(paste0("\t\t\t\t",clusters2[[j]][k,"latitude"],"\n"))#
												cat("\t\t\t</attr>\n")#
												cat("\t\t\t<attr name=\"longitude\">\n")#
												cat(paste0("\t\t\t\t",clusters2[[j]][k,"longitude"],"\n"))#
												cat("\t\t\t</attr>\n")#
												cat("\t\t\t<attr name=\"coordinates\">\n")#
												cat(paste0("\t\t\t\t",clusters2[[j]][k,"latitude"]," ",clusters2[[j]][k,"longitude"],"\n"))#
												cat("\t\t\t</attr>\n")#
												cat("\t\t</taxon>\n")#
											}#
									}#
								cat("\t</taxa>","\n")#
							}#
					}#
			}#
		if (grepl("Insert alignment blocks",template[i]))#
			{#
				for (j in 1:length(clusters2))#
					{#
						if ((dim(clusters2[[j]])[1] >= 3)&(sum(!is.na(clusters2[[j]][,"longitude"])) >= 3))#
							{#
								cat(paste0("\t<alignment id=\"alignment_",j,"\" dataType=\"nucleotide\">","\n"))#
								for (k in 1:dim(clusters2[[j]])[1])#
									{#
										if (!is.na(clusters2[[j]][k,"longitude"]))#
											{#
												cat("\t\t<sequence>\n")#
												cat(paste0("\t\t\t<taxon idref=\"",row.names(clusters2[[j]])[k],"\"/>","\n"))#
												cat("\t\t\tNNNN\n")#
												cat("\t\t</sequence>\n")#
											}#
									}#
								cat("\t</alignment>","\n")#
							}#
					}#
			}#
		if (grepl("Insert pattern blocks",template[i]))#
			{#
				for (j in 1:length(clusters2))#
					{#
						if ((dim(clusters2[[j]])[1] >= 3)&(sum(!is.na(clusters2[[j]][,"longitude"])) >= 3))#
							{#
								cat(paste0("\t<patterns id=\"patterns_",j,"\" from=\"1\" strip=\"false\">","\n"))#
								cat(paste0("\t\t<alignment idref=\"alignment_",j,"\"/>","\n"))#
								cat("\t</patterns>","\n")#
							}#
					}#
			}#
		if (grepl("Insert starting tree blocks",template[i]))#
			{#
				for (j in 1:length(clusters2))#
					{#
						if ((dim(clusters2[[j]])[1] >= 3)&(sum(!is.na(clusters2[[j]][,"longitude"])) >= 3))#
							{#
								tre = tree_subset(tree, tree$edge[NYstateIntroductions[j],2], levels_back=0)#
								tips = row.names(clusters2[[j]]); tips = tips[which(!is.na(clusters2[[j]][,"longitude"]))]#
								tips_to_drop = tre$tip.label[which(!gsub("'","",tre$tip.label)%in%tips)]#
								if (length(tips_to_drop) > 0) tre = ape::drop.tip(tre, tips_to_drop)#
								write.tree(tre, paste0("Phylogeographic_runs/Clade_",i,".tre"))#
								tre = scan(paste0("Phylogeographic_runs/Clade_",i,".tre"), what="", sep="\n", quiet=T)#
								txt = c("#NEXUS","begin trees;",paste0("\ttree tree_1 = [&R] ",tre),"end;")#
								write(txt, paste0("Phylogeographic_runs/Clade_",j,".tre"))#
								cat(paste0("\t<empiricalTreeDistributionModel id=\"treeModel_",j,"\" fileName=\"Clade_",j,".tre\">","\n"))#
								cat(paste0("\t\t<taxa idref=\"taxa_",j,"\"/>","\n"))#
								cat("\t</empiricalTreeDistributionModel>","\n")#
							}#
					}#
			}#
		if (grepl("Insert tree model blocks",template[i]))#
			{#
				for (j in 1:length(clusters2))#
					{#
						if ((dim(clusters2[[j]])[1] >= 3)&(sum(!is.na(clusters2[[j]][,"longitude"])) >= 3))#
							{#
								cat(paste0("\t<treeModel id=\"treeModel_",j,"\">","\n"))#
								cat(paste0("\t\t<coalescentTree idref=\"startingTree_",j,"\"/>","\n"))#
								cat("\t\t<rootHeight>","\n")#
								cat(paste0("\t\t\t<parameter id=\"treeModel.rootHeight_",j,"\"/>","\n"))#
								cat("\t\t</rootHeight>","\n")#
								cat("\t\t<nodeHeights internalNodes=\"true\">","\n")#
								cat(paste0("\t\t\t<parameter id=\"treeModel.internalNodeHeights_",j,"\"/>","\n"))#
								cat("\t\t</nodeHeights>","\n")#
								cat("\t\t<nodeHeights internalNodes=\"true\" rootNode=\"true\">","\n")#
								cat(paste0("\t\t\t<parameter id=\"treeModel.allInternalNodeHeights_",j,"\"/>","\n"))#
								cat("\t\t</nodeHeights>","\n")#
								cat("\t</treeModel>","\n")#
							}#
					}#
			}#
		if (grepl("Insert arbitraryBranchRates blocks",template[i]))#
			{#
				for (j in 1:length(clusters2))#
					{#
						if ((dim(clusters2[[j]])[1] >= 3)&(sum(!is.na(clusters2[[j]][,"longitude"])) >= 3))#
							{#
								cat(paste0("\t<arbitraryBranchRates id=\"coordinates.diffusion.branchRates",j,"\">","\n"))#
								cat(paste0("\t\t<treeModel idref=\"treeModel_",j,"\"/>","\n"))#
								cat("\t\t<rates>","\n")#
								cat(paste0("\t\t\t<parameter id=\"coordinates.diffusion.rates",j,"\" lower=\"0.0\"/>","\n"))#
								cat("\t\t</rates>","\n")#
								cat("\t</arbitraryBranchRates>","\n")#
							}#
					}#
			}#
		if (grepl("Insert distributionLikelihood blocks 1",template[i]))#
			{#
				for (j in 1:length(clusters2))#
					{#
						if ((dim(clusters2[[j]])[1] >= 3)&(sum(!is.na(clusters2[[j]][,"longitude"])) >= 3))#
							{#
								cat(paste0("\t<distributionLikelihood id=\"coordinates.diffusion.prior",j,"\">","\n"))#
								cat("\t\t<data>","\n")#
								cat(paste0("\t\t\t<parameter idref=\"coordinates.diffusion.rates",j,"\"/>","\n"))#
								cat("\t\t</data>","\n")#
								cat("\t\t<distribution>","\n")#
								cat(paste0("\t\t\t<onePGammaDistributionModel>","\n"))#
								cat("\t\t\t\t<shape>","\n")#
								cat("\t\t\t\t\t<parameter value=\"0.5\"/>","\n")#
								cat("\t\t\t\t</shape>","\n")#
								cat("\t\t\t</onePGammaDistributionModel>","\n")#
								cat("\t\t</distribution>","\n")#
								cat("\t</distributionLikelihood>","\n")#
							}#
					}#
			}#
		if (grepl("Insert coordinates.traitLikelihood blocks",template[i]))#
			{#
				for (j in 1:length(clusters2))#
					{#
						if ((dim(clusters2[[j]])[1] >= 3)&(sum(!is.na(clusters2[[j]][,"longitude"])) >= 3))#
							{#
								cat(paste0("\t<multivariateTraitLikelihood id=\"coordinates.traitLikelihood",j,"\" traitName=\"coordinates\" useTreeLength=\"true\" scaleByTime=\"true\" reportAsMultivariate=\"true\" reciprocalRates=\"true\" integrateInternalTraits=\"true\">","\n"))#
								cat("\t\t<multivariateDiffusionModel idref=\"coordinates.diffusionModel\"/>","\n")#
								cat(paste0("\t\t<treeModel idref=\"treeModel_",j,"\"/>"))#
								cat("\t\t<traitParameter>","\n")#
								cat(paste0("\t\t\t<parameter id=\"leaf.coordinates",j,"\"/>","\n"))#
								cat("\t\t</traitParameter>","\n")#
								cat("\t\t<conjugateRootPrior>","\n")#
								cat("\t\t\t<meanParameter>","\n")#
								cat("\t\t\t\t<parameter value=\"0.0 0.0\"/>","\n")#
								cat("\t\t\t</meanParameter>","\n")#
								cat("\t\t\t<priorSampleSize>","\n")#
								cat("\t\t\t\t<parameter value=\"0.000001\"/>","\n")#
								cat("\t\t\t</priorSampleSize>","\n")#
								cat("\t\t</conjugateRootPrior>","\n")#
								cat(paste0("\t\t<arbitraryBranchRates idref=\"coordinates.diffusion.branchRates",j,"\"/>","\n"))#
								cat("\t</multivariateTraitLikelihood>","\n")#
							}#
					}#
			}#
		if (grepl("Insert continuousDiffusionStatistic blocks 1",template[i]))#
			{#
				for (j in 1:length(clusters2))#
					{#
						if ((dim(clusters2[[j]])[1] >= 3)&(sum(!is.na(clusters2[[j]][,"longitude"])) >= 3))#
							{#
								cat(paste0("\t<continuousDiffusionStatistic id=\"coordinates.diffusionRate",j,"\" greatCircleDistance=\"true\">","\n"))#
								cat(paste0("\t\t<multivariateTraitLikelihood idref=\"coordinates.traitLikelihood",j,"\"/>","\n"))#
								cat("\t</continuousDiffusionStatistic>","\n")#
							}#
					}#
			}#
		if (grepl("Insert scaleOperator blocks",template[i]))#
			{#
				for (j in 1:length(clusters2))#
					{#
						if ((dim(clusters2[[j]])[1] >= 3)&(sum(!is.na(clusters2[[j]][,"longitude"])) >= 3))#
							{#
								cat(paste0("\t\t<scaleOperator scaleFactor=\"0.75\" weight=\"30\">","\n"))#
								cat(paste0("\t\t\t<parameter idref=\"coordinates.diffusion.rates",j,"\"/>","\n"))#
								cat("\t\t</scaleOperator>","\n")#
							}#
					}#
			}#
		if (grepl("Insert precisionGibbsOperator blocks",template[i]))#
			{#
				for (j in 1:length(clusters2))#
					{#
						if ((dim(clusters2[[j]])[1] >= 3)&(sum(!is.na(clusters2[[j]][,"longitude"])) >= 3))#
							{#
								cat(paste0("\t\t<precisionGibbsOperator weight=\"2\">","\n"))#
								cat(paste0("\t\t\t<multivariateTraitLikelihood idref=\"coordinates.traitLikelihood",j,"\"/>","\n"))#
								cat("\t\t\t<multivariateWishartPrior idref=\"coordinates.precisionPrior\"/>","\n")#
								cat("\t\t</precisionGibbsOperator>","\n")#
							}#
					}#
			}#
		if (grepl("Insert distributionLikelihood blocks 2",template[i]))#
			{#
				for (j in 1:length(clusters2))#
					{#
						if ((dim(clusters2[[j]])[1] >= 3)&(sum(!is.na(clusters2[[j]][,"longitude"])) >= 3))#
							{#
								cat(paste0("\t\t\t\t<distributionLikelihood idref=\"coordinates.diffusion.prior",j,"\"/>","\n"))#
							}#
					}#
			}#
		if (grepl("Insert multivariateTraitLikelihood blocks 1",template[i]))#
			{#
				for (j in 1:length(clusters2))#
					{#
						if ((dim(clusters2[[j]])[1] >= 3)&(sum(!is.na(clusters2[[j]][,"longitude"])) >= 3))#
							{#
								cat(paste0("\t\t\t\t<multivariateTraitLikelihood idref=\"coordinates.traitLikelihood",j,"\"/>","\n"))#
							}#
					}#
			}#
		if (grepl("Insert continuousDiffusionStatistic blocks 2",template[i]))#
			{#
				for (j in 1:length(clusters2))#
					{#
						if ((dim(clusters2[[j]])[1] >= 3)&(sum(!is.na(clusters2[[j]][,"longitude"])) >= 3))#
							{#
								cat(paste0("\t\t\t\t<continuousDiffusionStatistic idref=\"coordinates.diffusionRate",j,"\"/>","\n"))#
							}#
					}#
			}#
		if (grepl("Insert multivariateTraitLikelihood blocks 2",template[i]))#
			{#
				for (j in 1:length(clusters2))#
					{#
						if ((dim(clusters2[[j]])[1] >= 3)&(sum(!is.na(clusters2[[j]][,"longitude"])) >= 3))#
							{#
								cat(paste0("\t\t\t\t<multivariateTraitLikelihood idref=\"coordinates.traitLikelihood",j,"\"/>","\n"))#
							}#
					}#
			}#
		if (grepl("<!-- Insert logTree blocks -->",template[i]))#
			{#
				for (j in 1:length(clusters2))#
					{#
						if ((dim(clusters2[[j]])[1] >= 3)&(sum(!is.na(clusters2[[j]][,"longitude"])) >= 3))#
							{#
								cat(paste0("\t\t<logTree id=\"treeFileLog",j,"\" logEvery=\"1000\" nexusFormat=\"true\" fileName=\"Clade_",j,".trees\" sortTranslationTable=\"true\">","\n"))#
								cat(paste0("\t\t\t<treeModel idref=\"treeModel_",j,"\"/>","\n"))#
								cat("\t\t\t<joint idref=\"joint\"/>","\n")#
								cat("\t\t\t<trait name=\"coordinates\" tag=\"coordinates\">","\n")#
								cat(paste0("\t\t\t\t<multivariateTraitLikelihood idref=\"coordinates.traitLikelihood",j,"\"/>","\n"))#
								cat("\t\t\t</trait>","\n")#
								cat("\t\t\t<multivariateDiffusionModel idref=\"coordinates.diffusionModel\"/>","\n")#
								cat("\t\t\t<trait name=\"rate\" tag=\"coordinates.rate\">","\n")#
								cat(paste0("\t\t\t\t<arbitraryBranchRates idref=\"coordinates.diffusion.branchRates",j,"\"/>","\n"))#
								cat("\t\t\t</trait>","\n")#
								cat("\t\t</logTree>","\n")#
							}#
					}#
			}#
	}#
sink(NULL)
j=18
tre = tree_subset(tree, tree$edge[NYstateIntroductions[j],2], levels_back=0)
tre
tips = row.names(clusters2[[j]]); tips = tips[which(!is.na(clusters2[[j]][,"longitude"]))]
tips_to_drop = tre$tip.label[which(!gsub("'","",tre$tip.label)%in%tips)]
j
tre = tree_subset(tree, tree$edge[NYstateIntroductions[j],2], levels_back=0)
tips = row.names(clusters2[[j]]); tips = tips[which(!is.na(clusters2[[j]][,"longitude"]))]
tips_to_drop = tre$tip.label[which(!gsub("'","",tre$tip.label)%in%tips)]
if (length(tips_to_drop) > 0) tre = ape::drop.tip(tre, tips_to_drop)
write.tree(tre, paste0("Phylogeographic_runs/Clade_",i,".tre"))
i=1
write.tree(tre, paste0("Phylogeographic_runs/Clade_",i,".tre"))
tre = scan(paste0("Phylogeographic_runs/Clade_",i,".tre"), what="", sep="\n", quiet=T)
txt = c("#NEXUS","begin trees;",paste0("\ttree tree_1 = [&R] ",tre),"end;")
write(txt, paste0("Phylogeographic_runs/Clade_",j,".tre"))
for (j in 1:length(clusters2))#
					{#
						if ((dim(clusters2[[j]])[1] >= 3)&(sum(!is.na(clusters2[[j]][,"longitude"])) >= 3))#
							{#
								tre = tree_subset(tree, tree$edge[NYstateIntroductions[j],2], levels_back=0)#
								tips = row.names(clusters2[[j]]); tips = tips[which(!is.na(clusters2[[j]][,"longitude"]))]#
								tips_to_drop = tre$tip.label[which(!gsub("'","",tre$tip.label)%in%tips)]#
								if (length(tips_to_drop) > 0) tre = ape::drop.tip(tre, tips_to_drop)#
								write.tree(tre, paste0("Phylogeographic_runs/Clade_",j,".tre"))#
								tre = scan(paste0("Phylogeographic_runs/Clade_",j,".tre"), what="", sep="\n", quiet=T)#
								txt = c("#NEXUS","begin trees;",paste0("\ttree tree_1 = [&R] ",tre),"end;")#
								write(txt, paste0("Phylogeographic_runs/Clade_",j,".tre"))#
								# cat(paste0("\t<empiricalTreeDistributionModel id=\"treeModel_",j,"\" fileName=\"Clade_",j,".tre\">","\n"))#
								# cat(paste0("\t\t<taxa idref=\"taxa_",j,"\"/>","\n"))#
								# cat("\t</empiricalTreeDistributionModel>","\n")#
							}#
					}
country = shapefile("GADM_shapefiles_USA/GADM_USA_0.shp")#
NYstate = shapefile("NY_State_all_shapefiles/State_polygon.shp")	#
NYcounties = shapefile("NY_State_all_shapefiles/County_polygons.shp")
plot(NY_state)
plot(NYstate)
plot(country, add=T)
country
NYstate
CRS(country)
country@crs
str(country)
country@proj4string
NYstate = spTransform(NYstate, country@proj4string)
country = crop(shapefile("GADM_shapefiles_USA/GADM_USA_0.shp"), extent(-85,-67,38,48)
)
NYstate = shapefile("NY_State_all_shapefiles/State_polygon.shp")	#
NYcounties = shapefile("NY_State_all_shapefiles/County_polygons.shp")#
NYstate = spTransform(NYstate, country@proj4string)#
NYcounties = spTransform(NYcounties, country@proj4string)
plot(NYstate)
plot(country, add=T)
NYstate = shapefile("NY_State_all_shapefiles/State_shoreline.shp")
NYcounties = spTransform(NYcounties, country@proj4string)
plot(country, add=T)
plot(country)
plot(NYstate, border=NA, col=gray90, lwd=1.0)#
		plot(country, border=NA, col=gray97, add=T, lwd=0.4)
plot(NYstate, border=NA, col="gray90", lwd=1.0)
plot(NYstate, border=NA, col="gray90", lwd=1.0)#
		plot(country, border=NA, col="gray97", add=T, lwd=0.4)
country
NYstate
NYstate = spTransform(NYstate, country@proj4string)
plot(NYstate, border=NA, col="gray90", lwd=1.0)#
		plot(country, border=NA, col="gray97", add=T, lwd=0.4)
plot(NYstate, border=NA, col=rgb(229,229,229,255,255), lwd=1.0)
?rgb
plot(NYstate, border=NA, col=rgb(229,229,229,255,maxColorValue=255), lwd=1.0)
plot(country, border=NA, col=rgb(229,229,229,255,maxColorValue=100), add=T, lwd=0.4)
plot(country, border=NA, col=rgb(229,229,229,100,maxColorValue=255), add=T, lwd=0.4)
plot(NYstate, border=NA, col=rgb(229,229,229,200,maxColorValue=255), lwd=1.0)
dev.new(width=7.3, height=6); par(oma=c(0,0,0,0), mar=c(1,1,1,1), lwd=0.2, col="gray30")#
		cols = c(colorRampPalette(brewer.pal(9,"Greys"))(201)[1:101])#
		plot(NYstate, border=NA, col=rgb(229,229,229,200,maxColorValue=255), lwd=1.0)#
		for (i in 1:length(clusters1))#
			{#
				if (!is.na(centroids[[i]][,1]))#
					{#
						if (length(clusters1[[i]]) > 1)#
							{#
								for (j in 1:dim(clusters2[[i]])[1])#
									{#
										if (!is.na(clusters2[[i]][j,1]))#
											{#
												segments(centroids[[i]][,1],centroids[[i]][,2],clusters2[[i]][j,"longitude"],clusters2[[i]][j,"latitude"], lwd=0.5, col="gray30")	#
											}#
									}#
							}#
					}#
			}#
		for (i in 1:length(clusters1))#
			{#
				if (!is.na(centroids[[i]][,1]))#
					{#
						for (j in 1:dim(clusters2[[i]])[1])#
							{#
								points(clusters2[[i]][,"longitude"], clusters2[[i]][,"latitude"], pch=16, cex=0.8, col="chartreuse3")#
								points(clusters2[[i]][,"longitude"], clusters2[[i]][,"latitude"], pch=1, cex=0.8, col="gray30", lwd=0.2)#
							}#
					}#
			}#
		for (i in 1:length(clusters1))#
			{#
				if (!is.na(centroids[[i]][,1]))#
					{#
						if (length(clusters1[[i]]) > 1)#
							{#
								points(centroids[[i]][,1], centroids[[i]][,2], pch=16, cex=0.6, col="red")#
								points(centroids[[i]][,1], centroids[[i]][,2], pch=1, cex=0.6, col="gray30", lwd=0.2)#
							}#
					}#
			}
library(diagram)#
library(lubridate)#
library(seraphim)#
library(treeio)#
#
analysis = "TreeTime_26102020"#
metadata_NY_sequences = read.csv("NY_sequences_data.csv", head=T)#
metadata_NS_sequences = read.csv("NS_sequences_data.csv", head=T)#
writingFiles = FALSE; showingPlots = FALSE
source("MCC_tree_extraction.r"); analyses = c(); runningNewAnalyses = FALSE#
wd = getwd(); setwd(paste0(wd,"/Phylogeographic_runs/"))#
for (i in 1:length(clusters2))#
	{#
		if ((dim(clusters2[[i]])[1] >= 3)&(sum(!is.na(clusters2[[i]][,"longitude"])) >= 3)) analyses = c(analyses, paste0("Clade_",i))#
	}
library(diagram)#
library(lubridate)#
library(seraphim)#
library(treeio)#
#
analysis = "TreeTime_26102020"#
metadata_NY_sequences = read.csv("NY_sequences_data.csv", head=T)#
metadata_NS_sequences = read.csv("NS_sequences_data.csv", head=T)#
writingFiles = FALSE; showingPlots = FALSE#
#
# 1. Fathering all NYC sequences in a unique fasta file#
#
data = read.csv("Provided_metadata.csv.csv", sep=",")#
dates = dmy(gsub("\\/","-",as.character(data[,"Clinical.Collection.Date"])))#
files = list.files("All_original_sequences"); buffer = c()#
for (i in 1:length(files))#
	{#
		buffer = c(buffer, scan(paste0("All_original_sequences/",files[i]), what="", sep="\n", quiet=T, blank.lines.skip=F))#
	}#
if (writingFiles) write(buffer, "All_NY_sequences.fasta")#
#
# 2. Preparing the input files for the discrete phylogeographic analyses #
#
tree = read.tree(paste0(analysis,".tre")); seqIDs = tree$tip.label#
locations = rep(NA, length(seqIDs)); collectionDates = rep(NA, length(seqIDs))#
for (i in 1:length(seqIDs))#
	{#
		if (grepl("hCoV-19",seqIDs[i]))#
			{#
				locations[i] = unlist(strsplit(seqIDs[i],"\\/"))[2]#
			}	else	{#
				locations[i] = unlist(strsplit(seqIDs[i],"\\/"))[1]#
			}#
		if (length(unlist(strsplit(seqIDs[i],"\\|"))) == 3)#
			{#
				collectionDates[i] = unlist(strsplit(seqIDs[i],"\\|"))[length(unlist(strsplit(seqIDs[i],"\\|")))]#
			}#
		if (length(unlist(strsplit(seqIDs[i],"\\|"))) == 4)#
			{#
				collectionDates[i] = unlist(strsplit(seqIDs[i],"\\|"))[length(unlist(strsplit(seqIDs[i],"\\|")))-1]#
			}#
	}#
for (i in 1:length(seqIDs))#
	{#
		if (seqIDs[i]%in%metadata_NY_sequences[,"GISAID.Virus.Name"])#
			{#
				index = which(metadata_NY_sequences[,"GISAID.Virus.Name"]==seqIDs[i])#
				if (metadata_NY_sequences[index,"Zip.State"]=="NY")#
					{#
						locations[i] = "NY"#
					}	else	{#
						locations[i] = "USA"#
					}#
				date = unlist(strsplit(metadata_NY_sequences[index,"Clinical.Collection.Date"],"\\/"))#
				collectionDates[i] = paste(date[3],date[2],date[1],sep="-")#
			}#
	}#
tab = cbind(seqIDs,locations,collectionDates); colnames(tab) = c("Strain","Location","Collection Data")#
if (writingFiles) write.csv(tab, paste0(analysis,".csv"), row.names=F, quote=F)#
data = read.csv(paste0(analysis,".csv")); tab = data[,1:2]; colnames(tab) = c("trait","location"); txt = c()#
for (i in 1:dim(tab)[1])#
	{#
		if (tab[i,"location"] != "NY") tab[i,"location"] = "other"#
		txt = c(txt, paste0(">",tab[i,"trait"]),"NNNN")#
	}#
if (writingFiles) write.table(tab, paste0(analysis,".txt"), row.names=F, quote=F, sep="\t")#
if (writingFiles) write(txt, paste0(analysis,".fasta"))#
#
# 3. Analysing the outputs of the preliminary discrete phylogeographic analysis #
#
burnIn = 101; computingHPDInterval = FALSE # N.B.: long analysis#
if (computingHPDInterval)#
	{#
		trees = scan(paste0(gsub("2020","20",analysis),".trees"), what="", sep="\n", quiet=T, blank.lines.skip=F)#
		indices1 = which(!grepl("tree STATE_",trees)); indices2 = which(grepl("tree STATE_",trees))#
		NYstateBranches_list = rep(NA,length(trees))#
		NYstateIntroductions_list = rep(NA,length(trees))#
		NYstateTipBranches_list = rep(NA,length(trees))#
		for (i in (burnIn+1):length(indices2))#
			{#
				tree1 = trees[c(indices1[1:(length(indices1)-1)],indices2[i],indices1[length(indices1)])]#
				write(tree1, paste0(gsub("2020","20",analysis),"_sampled_tree_",i,".tree"))#
				tree2 = readAnnotatedNexus(paste0(gsub("2020","20",analysis),"_sampled_tree_",i,".tree"))#
				NYstateBranches = 0; NYstateIntroductions = 0; NYstateTipBranches = 0#
				for (j in 1:dim(tree2$edge)[1])#
					{#
						if (tree2$annotations[[j]]$location == "NY")#
							{#
								NYstateBranches = NYstateBranches + 1#
								index = which(tree2$edge[,2]==tree2$edge[j,1])#
								if (tree2$annotations[[index]]$location != "NY")#
									{#
										NYstateIntroductions = NYstateIntroductions + 1#
									}#
								if (!tree2$edge[j,2]%in%tree2$edge[,1])#
									{#
										NYstateTipBranches = NYstateTipBranches + 1#
									}#
							}#
					}#
				NYstateBranches_list[i] = NYstateBranches#
				NYstateIntroductions_list[i] = NYstateIntroductions#
				NYstateTipBranches_list[i] = NYstateTipBranches#
				file.remove(paste0(gsub("2020","20",analysis),"_sampled_tree_",i,".tree"))#
			}#
		quantiles = quantile(NYstateIntroductions_list[!is.na(NYstateIntroductions_list)],probs=c(0.025,0.975))#
		cat("A minimum number of ",median(NYstateIntroductions_list[!is.na(NYstateIntroductions_list)])," lineage introductions (95% HPD interval = [",#
			quantiles[1],"-",quantiles[2],"])"," identified from the global phylogenetic analysis of ",NYstateTipBranches," SARS-CoV-2 sampled in NY",sep="")#
		# A minimum number of 116 lineage introductions (95% HPD interval = [107-127]) identified from the global phylogenetic analysis of 828 SARS-CoV-2 sampled in NY#
	}#
#
tree = readAnnotatedNexus(paste0(gsub("2020","20",analysis),".tree"))#
if (showingPlots)#
	{#
		tab = read.csv(paste0(analysis,".csv"), head=T)#
		samplingDates = decimal_date(ymd(gsub("\\/","-",tab[,"Collection.Data"]))); mostRecentSamplingYear = max(samplingDates, na.rm=T)#
		selectedDates = decimal_date(ymd(c("2020-01-01","2020-02-01","2020-03-01","2020-04-01","2020-05-01")))#
		rootHeight = max(nodeHeights(tree)); root_time = mostRecentSamplingYear-rootHeight#
		selectedLabels = c("01-01-2020","01-02-2020","01-03-2020","01-04-2020","01-05-2020")#
		cols = rep("gray30",dim(tree$edge)[1]); lwds = rep(0.1,dim(tree$edge)[1])#
		for (i in 1:dim(tree$edge)[1])#
			{#
				if (tree$edge[i,1]%in%tree$edge[,2])#
					{#
						index = which(tree$edge[,2]==tree$edge[i,1])#
						if ((tree$annotations[[index]]$location=="NY") & (tree$annotations[[i]]$location=="NY"))#
							{#
								cols[i] = "chartreuse3"; lwds[i] = 0.4#
							}#
					}#
			}#
		pdf("Figure_1_NEW.pdf", width=7, height=7); par(oma=c(0,0,0,0), mar=c(0,0,0,0.0), lwd=0.1)#
		# dev.new(width=7, height=7); par(oma=c(0,0,0,0), mar=c(0,0,0,0.0), lwd=0.1)#
		plot(tree, type="fan", show.tip.label=F, show.node.label=F, edge.width=lwds, cex=0.6, align.tip.label=3, col="gray30", edge.color=cols)#
		for (i in 1:dim(tree$edge)[1])#
			{#
				if ((!tree$edge[i,2]%in%tree$edge[,1]) & (grepl("NY",tree$tip.label[tree$edge[i,2]])))#
					{#
						nodelabels(node=tree$edge[i,2], pch=16, cex=0.3, col="chartreuse3")#
						nodelabels(node=tree$edge[i,2], pch=1, cex=0.3, col="gray30", lwd=0.5)#
					}#
				if (tree$annotations[[i]]$location == "NY")#
					{#
						index = which(tree$edge[,2]==tree$edge[i,1])#
						if (tree$annotations[[index]]$location != "NY")#
							{#
								nodelabels(node=tree$edge[i,2], pch=16, cex=0.6, col="chartreuse3")#
								nodelabels(node=tree$edge[i,2], pch=1, cex=0.6, col="gray30", lwd=0.5)#
							}#
					}#
			}#
		add.scale.bar(x=0.0, y=-0.01, length=NULL, ask=F, lwd=0.5 , lcol ="gray30", cex=0.7)#
		cols = rep("gray50",dim(tree$edge)[1]); lwds = rep(0.05,dim(tree$edge)[1])#
		for (i in 1:dim(tree$edge)[1])#
			{#
				if (tree$edge[i,1]%in%tree$edge[,2])#
					{#
						index = which(tree$edge[,2]==tree$edge[i,1])#
						if ((tree$annotations[[index]]$location=="NY") & (tree$annotations[[i]]$location=="NY"))#
							{#
								cols[i] = "chartreuse3"; lwds[i] = 0.4#
							}#
					}#
			}#
		dev.off()#
		pdf("Figure_S1_NEW.pdf", width=11, height=8) # dev.new(width=11, height=8)#
		plot(tree, show.tip.label=F, show.node.label=F, edge.width=lwds, cex=0.6, align.tip.label=3, col="gray30", edge.color=cols)#
		for (i in 1:dim(tree$edge)[1])#
			{#
				if (tree$annotations[[i]]$location == "NY")#
					{#
						index = which(tree$edge[,2]==tree$edge[i,1])#
						if (tree$annotations[[index]]$location != "NY")#
							{#
								nodelabels(node=tree$edge[i,2], pch=16, cex=0.6, col="chartreuse3")#
								nodelabels(node=tree$edge[i,2], pch=1, cex=0.6, col="gray30", lwd=0.5)#
							}	else	{#
								if (!tree$edge[i,2]%in%tree$edge[,1])#
									{	}#
							}#
					}#
			}#
		axis(lwd=0.2, at=selectedDates-root_time, labels=selectedLabels, cex.axis=0.65, mgp=c(0,0.1,-0.9), lwd.tick=0.2, #
			 col.lab="gray30", col="gray30", tck=-0.01, side=1)#
		dev.off()#
	}#
NYstateBranches = c(); NYstateIntroductions = c()#
NYstateTipBranches = c(); sampledSequences = c()#
for (i in 1:dim(tree$edge)[1])#
	{#
		if (tree$annotations[[i]]$location == "NY")#
			{#
				NYstateBranches = c(NYstateBranches,i)#
				index = which(tree$edge[,2]==tree$edge[i,1])#
				if (tree$annotations[[index]]$location != "NY")#
					{#
						NYstateIntroductions = c(NYstateIntroductions, i)#
					}#
				if (!tree$edge[i,2]%in%tree$edge[,1])#
					{#
						NYstateTipBranches = c(NYstateTipBranches, i)#
						sampledSequences = c(sampledSequences, tree$tip.label[tree$edge[i,2]])#
					}#
			}#
	}#
for (i in 1:length(NYstateIntroductions))#
	{#
		if (i == 1) clusters1 = list()#
		if (tree$edge[NYstateIntroductions[i],2]%in%tree$edge[,1])#
			{#
				subtree = tree_subset(tree, tree$edge[NYstateIntroductions[i],2], levels_back=0)#
				clusters1[[i]] = gsub("'","",subtree$tip.label)#
			}	else		{#
				clusters1[[i]] = gsub("'","",tree$tip.label[tree$edge[NYstateIntroductions[i],2]])#
			}#
	}#
for (i in 2:length(clusters1))#
	{#
		for (j in 1:(i-1))#
			{#
				if (sum(clusters1[[i]]%in%clusters1[[j]]) == length(clusters1[[i]]))#
					{#
						clusters1[[j]] = clusters1[[j]][which(!clusters1[[j]]%in%clusters1[[i]])]#
					}#
				if (sum(clusters1[[j]]%in%clusters1[[i]]) == length(clusters1[[j]]))#
					{#
						clusters1[[i]] = clusters1[[i]][which(!clusters1[[i]]%in%clusters1[[j]])]#
					}#
			}#
	}#
sampledSequences = gsub("'","",sampledSequences)#
zipCodes = shapefile("ZipCodes_shapefile_NY/ZipCodes_shapefile_NY.shp")#
zipCodes = shapefile("ZipCodes_shapefile_US/ZipCodes_shapefile_US.shp")#
if (!file.exists(paste0("Sampling_NY_state.csv")))#
	{#
		data = read.csv("NY_sequences_data.csv", head=T)#
		samplingData = matrix(nrow=length(sampledSequences), ncol=5)#
		colnames(samplingData) = c("sequenceID","collectionDate","zipCode","longitude","latitude")#
		samplingData[,"sequenceID"] = sampledSequences#
		for (i in 1:dim(samplingData)[1])#
			{#
				index = which(data[,"GISAID.Virus.Name"]==samplingData[i,"sequenceID"])#
				date = dmy(gsub("\\/","-",data[index,"Clinical.Collection.Date"]))#
				samplingData[i,"collectionDate"] = decimal_date(date)#
				ID = unlist(strsplit(samplingData[i,"sequenceID"],"\\/"))[3]#
				samplingData[i,"zipCode"] = data[index,"Zip"]#
				indices = which(zipCodes@data[,"ZCTA5CE10"]==data[index,"Zip"])#
				if (length(indices) > 0)#
					{#
						maxArea = 0; polIndex1 = 0; polIndex2 = 0#
						for (j in 1:length(indices))#
							{#
								for (k in 1:length(zipCodes@polygons[[indices[j]]]@Polygons))#
									{#
										if (maxArea < zipCodes@polygons[[indices[j]]]@Polygons[[k]]@area)#
											{#
												maxArea = zipCodes@polygons[[indices[j]]]@Polygons[[k]]@area; polIndex1 = indices[j]; polIndex2 = k#
											}#
									}#
							}#
						pol = zipCodes@polygons[[polIndex1]]@Polygons[[polIndex2]]#
						p = Polygon(pol@coords); ps = Polygons(list(p),1); sps = SpatialPolygons(list(ps))#
						pol = sps; proj4string(pol) = zipCodes@proj4string#
						samplingData[i,c("longitude","latitude")] = coordinates(pol) # to avoid a jitter:#
						samplingData[i,c("longitude","latitude")] = spsample(pol, 1, type="random")@coords#
					}#
			}#
		# print(samplingData[which(is.na(samplingData[,"zipCode"])),"sequenceID"])#
		write.csv(samplingData, "Sampling_NY_state.csv", quote=F, row.names=F)#
	}	#
samplingData = read.csv("Sampling_NY_state.csv", head=T)#
for (i in 1:length(NYstateIntroductions))#
	{#
		tab = c()#
		if (i == 1)#
			{#
				clusters2 = list(); centroids = list()#
			}#
		for (j in 1:length(clusters1[[i]]))#
			{#
				index = which(samplingData[,"sequenceID"]==clusters1[[i]][j])#
				if (length(index) == 1)#
					{#
						line = cbind(as.numeric(samplingData[index,"collectionDate"]),as.numeric(samplingData[index,"longitude"]),as.numeric(samplingData[index,"latitude"]))#
						row.names(line) = clusters1[[i]][j]; tab = rbind(tab, line)#
					}#
			}#
		colnames(tab) = c("collectionDate","longitude","latitude"); clusters2[[i]] = tab#
		centroids[[i]] = cbind(mean(tab[!is.na(tab[,"longitude"]),"longitude"]), mean(tab[!is.na(tab[,"latitude"]),"latitude"]))#
	}#
clusterSizes = rep(NA, length(clusters1))#
collectionDates = c()#
for (i in 1:length(clusters1))#
	{#
		clusterSizes[i] = length(clusters1[[i]])#
		collectionDates = c(collectionDates, clusters2[[i]][,"collectionDate"])#
	}#
if (showingPlots)#
	{#
		collectionDates_filetered = collectionDates#
		dev.new(width=3.3, height=8); par(mfrow=c(2,1), oma=c(0,0,0,0), mar=c(2,2,1,1), lwd=0.2, col="gray30")#
		hist(clusterSizes, breaks=50, axes=F, ann=F, title=NULL, col="#66CD0099", border="gray30")#
		axis(side=2, lwd.tick=0.2, cex.axis=0.65, mgp=c(0,0.20,0), lwd=0.2, tck=-0.015, col.tick="gray30", col.axis="gray30", col="gray30")#
		axis(side=1, lwd.tick=0.2, cex.axis=0.65, mgp=c(0,0.00,0), lwd=0.2, tck=-0.015, col.tick="gray30", col.axis="gray30", col="gray30")#
		hist(collectionDates_filetered, breaks=65, axes=F, ann=F, title=NULL, col="#66CD0099", border="gray30")#
		axis(side=2, lwd.tick=0.2, cex.axis=0.65, mgp=c(0,0.20,0), lwd=0.2, tck=-0.015, col.tick="gray30", col.axis="gray30", col="gray30")#
		axis(side=1, lwd.tick=0.2, cex.axis=0.65, mgp=c(0,0.00,0), lwd=0.2, tck=-0.015, col.tick="gray30", col.axis="gray30", col="gray30",#
			 at=decimal_date(ymd(c("2020-02-01","2020-03-01","2020-04-01","2020-05-01"))),#
			 labels=c("01-02-2020","01-03-2020","01-04-2020","01-05-2020"))#
	}#
country = crop(shapefile("GADM_shapefiles_USA/GADM_USA_0.shp"), extent(-85,-67,38,48))#
NYstate = shapefile("NY_State_all_shapefiles/State_shoreline.shp")	#
NYcounties = shapefile("NY_State_all_shapefiles/County_polygons.shp")#
NYstate = spTransform(NYstate, country@proj4string)#
NYcounties = spTransform(NYcounties, country@proj4string)#
if (showingPlots)#
	{#
		dev.new(width=7.3, height=6); par(oma=c(0,0,0,0), mar=c(1,1,1,1), lwd=0.2, col="gray30")#
		cols = c(colorRampPalette(brewer.pal(9,"Greys"))(201)[1:101])#
		plot(NYstate, border=NA, col=rgb(229,229,229,200,maxColorValue=255), lwd=1.0)#
		for (i in 1:length(clusters1))#
			{#
				if (!is.na(centroids[[i]][,1]))#
					{#
						if (length(clusters1[[i]]) > 1)#
							{#
								for (j in 1:dim(clusters2[[i]])[1])#
									{#
										if (!is.na(clusters2[[i]][j,1]))#
											{#
												segments(centroids[[i]][,1],centroids[[i]][,2],clusters2[[i]][j,"longitude"],clusters2[[i]][j,"latitude"], lwd=0.5, col="gray30")	#
											}#
									}#
							}#
					}#
			}#
		for (i in 1:length(clusters1))#
			{#
				if (!is.na(centroids[[i]][,1]))#
					{#
						for (j in 1:dim(clusters2[[i]])[1])#
							{#
								points(clusters2[[i]][,"longitude"], clusters2[[i]][,"latitude"], pch=16, cex=0.8, col="chartreuse3")#
								points(clusters2[[i]][,"longitude"], clusters2[[i]][,"latitude"], pch=1, cex=0.8, col="gray30", lwd=0.2)#
							}#
					}#
			}#
		for (i in 1:length(clusters1))#
			{#
				if (!is.na(centroids[[i]][,1]))#
					{#
						if (length(clusters1[[i]]) > 1)#
							{#
								points(centroids[[i]][,1], centroids[[i]][,2], pch=16, cex=0.6, col="red")#
								points(centroids[[i]][,1], centroids[[i]][,2], pch=1, cex=0.6, col="gray30", lwd=0.2)#
							}#
					}#
			}#
		legendRast = raster(as.matrix(c(min(pop[],na.rm=T),max(pop[],na.rm=T))))#
		mtext("Human population (log-transformed)", col="gray30", cex=0.7, line=-23, at=601000)#
		plot(legendRast, legend.only=T, col=cols, legend.width=0.5, legend.shrink=0.3, smallplot=c(0.141,0.409,0.18,0.19),#
			 alpha=1, horizontal=T, legend.args=list(text="", cex=0.7, line=0.5, col="gray30"), axis.args=list(cex.axis=0.55, lwd=0,#
			 lwd.tick=0.2, tck=-0.8, col.axis="gray30", line=0, mgp=c(0,-0.05,0)))#
	}#
#
# 4. Preparing the continuous phylogeographic analysis (RRW, Cauchy model)#
#
template = scan("RRW_template_file2.xml", what="", sep="\n", quiet=T, blank.lines.skip=F); xml = c()
